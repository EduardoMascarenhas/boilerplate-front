import ProtectedRouteAdmin from "@/components/protectedRouteAdmin";
import { GetUsersDocument } from "@/generated/graphql";
import styles from "@/styles/Home.module.css";
import { Post } from "@/types/PostType";
import { User } from "@/types/UserType";
import { useQuery } from "@apollo/client";
import { Geist, Geist_Mono } from "next/font/google";
import Head from "next/head";
import { useEffect, useState } from "react";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const Dashboard = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // Use Apollo's useQuery hook to fetch users
  const { data, loading, error } = useQuery(GetUsersDocument, {
    onError: (error) => {
      // Handle errors
      if (error.graphQLErrors && error.graphQLErrors.length > 0) {
        setErrorMessage(error.graphQLErrors[0].message);
      } else if (error.networkError) {
        setErrorMessage('Erro de rede. Tente novamente mais tarde.');
      } else {
        setErrorMessage('Ocorreu um erro desconhecido.');
      }
    },
  });

  // Update state when the data changes
  useEffect(() => {
    if (data) {
      setUsers(data.getUsers.map((user: any) => ({
        ...user,
        id: user.id ?? 0,
      })))
    }
  }, [data]);

  if (loading) {
    return <div>Carregando lista de usuários...</div>;
  }

  if (errorMessage) {
    return <div>{errorMessage}</div>;
  }

  return (
    <ProtectedRouteAdmin>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <div>
          <h1>Usuários</h1>
          <ul>
            {users.map((user: User) => (
              <li key={user.id}>
                <h2>{user.id}- {user.name} ({user.email})</h2>
                <h3>Posts:</h3>
                <ul>
                  {user?.posts && user?.posts.map((post: Post) => (
                    <li key={post.id}>{post.title}</li>
                  ))}
                </ul>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </ProtectedRouteAdmin>
  );
};

export default Dashboard;
